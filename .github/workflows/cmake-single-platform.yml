# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    - uses: lukka/get-cmake@latest

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      id: runvcpkg
      with:
        # This specifies the location of vcpkg, where it is going to be restored from cache, or create from scratch.
        vcpkgDirectory: '${{ runner.workspace }}/b/vcpkg'
        # The Git commit id of vcpkg to be checked out. This is only needed because we are not using a submodule.
        vcpkgGitCommitId: '${{ matrix.vcpkgCommitId}}'
        # The vcpkg.json file, which will be part of cache key computation.
        vcpkgJsonGlob: '${{ github.workspace }}/vcpkg.json'


    - name: Prints output of run-vcpkg's action.
      run: echo "root='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}', triplet='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_DEFAULT_TRIPLET_OUT }}' "

    - name: Run CMake with Ninja
      uses: lukka/run-cmake@v10
      with:
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        configurePreset: 'default'
        buildPreset: 'default'

